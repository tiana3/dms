<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace="com.mydomain.UserMapper" 对应接口,就把这xml配置文件和对应接口联系上了-->
<mapper namespace="com.dms.dao.OrderDao">
<!-- 自定义返回结果集 -->
<!-- id="userBean" 是id用于下面返回值用    type="UserBean" 是对应的实体类   -->
   <resultMap id="orderSender" type="Order">
<!-- property="id" 是对应实体类的属性  column="id"  对应的是数据库的列  -->
        <result property="sender" column="sender" javaType="java.lang.String"></result>
  		<result property="senderPhone" column="senderPhone" javaType="java.lang.String"></result>
   </resultMap>
   
   <resultMap id="order" type="Order">
<!-- property="id" 是对应实体类的属性  column="id"  对应的是数据库的列  -->
       	<id property="orderId" column="orderId" javaType="java.lang.String"></id>
        <result property="SA" column="SA" javaType="java.lang.Integer"></result>
  		<result property="Date" column="Date" javaType="java.lang.String"></result>
   		<result property="mileage" column="mileage" javaType="java.lang.Double"></result>
   		<result property="carRemark" column="carRemark" javaType="java.lang.String"></result>
   		<result property="remark" column="remark" javaType="java.lang.String"></result>
   		<result property="expectDate" column="expectDate" javaType="java.lang.String"></result>
		<result property="repairId" column="repairTypeId" javaType="java.lang.Integer"></result>
     	<result property="sender" column="sender" javaType="java.lang.String"></result>
     	<result property="senderPhone" column="senderPhone" javaType="java.lang.String"></result>
     	<result property="orderStateId" column="orderStateId" javaType="java.lang.Integer"></result>
     	<result property="inspector" column="inspector" javaType="java.lang.Integer"></result>
     	<result property="completedDate" column="completedDate" javaType="java.util.Date"></result>
     	<result property="workPrice" column="workPrice" javaType="java.lang.Double"></result>
     	<result property="partPrice" column="partPrice" javaType="java.lang.Double"></result>
     	<result property="discountPrice" column="discountPrice" javaType="java.lang.Double"></result>
  		<result property="settlementDate" column="settlementDate" javaType="java.util.Date"></result>
  		
  		<!-- 根据数据库 column="customerCarInfoId"的值  去com.dms.dao.CustomerCarInfoDao.getCustomerCarInfoById 查询详细的车辆信息            javaType="CustomerCarInfo"是指实体类的属性是什么类型的 -->
  		<association property="customerCarInfo" column="customerCarInfoId"  javaType="CustomerCarInfo" select="com.dms.dao.CustomerCarInfoDao.getCustomerCarInfoById"></association>  		
  		<collection property="customs" column="orderId" select="getOrderCustomsByOrderId"></collection>
 		<collection property="parts" column="orderId" select="getOrderPartsByOrderId"></collection>
  		
  
   </resultMap>
    

    
      
<!-- 在各种标签中的id属性必须和接口中的方法名相同 ， id属性值必须是唯一的，不能够重复使用。parameterType属性指明查询时使用的参数类型，resultMap="userBean" 是表明返回时是返回的上面<resultMap>标签里定义的类型，会把从数据库里读取出来的列，一个一个封装到实体类的property里     
  resultType属性指明查询返回的结果集类型，如果直接返回 resultType=“UserBean”，就不会通过resultMap，会直接把读取的数据，封装到UserBean实体类   数据对应条件是， 数据库里的字段名和实体类的属性名一样，或者和实体类的set方法名对应，不然数据就找不到对应的实体类属性 -->    
<!-- useGeneratedKeys：（ 仅 对 insert 有 用 ） 这 会 告 诉 MyBatis 使 用 JDBC 的getGeneratedKeys 
            方法来取出由数据（比如：像 MySQL 和 SQLServer 这样的数据库管理系统的自动递增字段）内部生成的主键。默认值： false。 -->    
<!--keyProperty： （仅对 insert有用）标记一个属性， MyBatis 会通过 getGeneratedKeys或者通过 insert 语句的 selectKey 子元素设置它的值。默认：不设置。 -->
<!--#{}中的内容，为占位符，当参数为某个JavaBean时，表示放置该Bean对象的属性值  -->

	<!--  useGeneratedKeys="true" keyProperty="id"  这就表明要在添加的同时，从数据库获取自动生成的id字段的数据，获取到后会直接设置到调用时传入的对象里 -->
	<insert id="addOrder" >
		insert into orders values(#{orderId},#{customerCarInfo.customerCarInfoId},#{SA},#{Date},#{mileage},#{carRemark},#{remark},#{expectDate},#{repairId},#{sender},#{senderPhone},1,0,0,0,0,#{inspector},null,null)
	</insert>
   	
   	<insert id="addCustoms" >
		insert into custom(orderId,customName,customPrice,employeeId) values
		<foreach collection="customs" item="custom" separator=",">
			(#{orderId}, #{custom.customName}, #{custom.customPrice}, #{custom.employeeId})
		</foreach>
	</insert>
	
	<insert id="addParts" >
		insert into order_part(orderId,partId,picker)  values
		<foreach collection="parts" item="part" separator=",">
			(#{orderId}, #{part.partId},#{part.picker})
		</foreach>
	
	</insert>
  
    <select id="getAllOrders"   resultMap="order">
  		  SELECT * FROM orders where orderStateId = 1 
    </select>
    
    <select id="getOrders" resultMap="order">
    	SELECT * FROM orders inner join customercarinfo on orders.customerCarInfoId=customercarinfo.customerCarInfoId
		<where>
			<if test="orderId != null">orderId like "%"#{orderId}"%"</if>
			<if test="plateNumber != null">and plateNumber like "%"#{plateNumber}"%"</if>
			<if test="repairId != 0">and repairTypeId = #{repairId}</if>
			<if test="employeeId != 0">and SA = #{employeeId}</if>
			and orderStateId = 1
		</where>
		
    </select>
    
	 <select id="getOrderByOrderId"   resultMap="order">
  		  SELECT * FROM orders where orderStateId = 1 and orderId=#{orderId}
    </select>
    
    
    <select id="getLastOrder" parameterType="String"  resultMap="orderSender">
     SELECT sender,senderPhone FROM orders inner join customercarinfo on orders.customerCarInfoId = customercarinfo.customerCarInfoId where plateNumber=#{plateNumber} or VIN=#{VIN} ORDER BY orderId DESC LIMIT 0,1
    </select>
    
    <select id="getOrderCustomsByOrderId" parameterType="String" resultType="Custom">
     	select * from custom where orderId = #{orderId}
    </select>
    
    <select id="getOrderPartsByOrderId" parameterType="String"  resultType="Part">
		select * from order_part inner join part on order_part.partId = part.partId inner join cartype on part.modelId = cartype.modelId where orderId = #{orderId}
    </select>
    <select id="getOrderById" resultMap="order">
    	select * from orders where orderId=#{orderId} 
    </select>
    <select id="getSettlementByWordKey" resultMap="order">
    	select * from orders inner join customercarinfo on orders.customerCarInfoId = customercarinfo.customerCarInfoId
    	<where>
    		<if test="orderId != null &amp;&amp; orderId != ''">orderId like "%"#{orderId}"%"</if>
			<if test="completedDate != null &amp;&amp; completedDate != ''">and completedDate like "%"#{completedDate}"%"</if>
			<if test="SA != 0 &amp;&amp; SA != ''">and SA = #{SA}</if>
			<if test="plateNumber != null &amp;&amp; plateNumber != ''">and plateNumber like "%"#{plateNumber}"%"</if>
			and orderStateId = 2;
    	</where>
    		  
    </select>
    <update id="deleteWorkout">
    	update orders set orderStateId = 1,completedDate=null where orderId = #{orderId}
    </update>
    
    <select id="getSettlementByOrderStateId" resultMap="order">
    	select * from orders inner join customercarinfo on orders.customerCarInfoId = customercarinfo.customerCarInfoId
    	<where>
    		<if test="orderId != null &amp;&amp; orderId != ''">orderId like "%"#{orderId}"%"</if>
			<if test="settlementDate != null &amp;&amp; settlementDate != ''">and settlementDate like "%"#{settlementDate}"%"</if>
			<if test="SA != 0 &amp;&amp; SA != ''">and SA = #{SA}</if>
			<if test="plateNumber != null &amp;&amp; plateNumber != ''">and plateNumber like "%"#{plateNumber}"%"</if>
			and orderStateId = 3;
    	</where>
    </select>
    
    <update id="updateOrderStateId">
    	update orders set orders.orderStateId = 2 where orders.orderId = #{orderId}
    </update>
    <delete id="deleteOrder" parameterType="String">
    	delete from orders where orderId = #{orderId}
    </delete>
    
    <delete id="deleteCustoms" parameterType="String">
    	delete from custom where orderId = #{orderId}
    </delete>
    
     <delete id="deleteParts" parameterType="String">
    	delete from order_part where orderId = #{orderId}
    </delete>
    <update id="updatepicker">
    	update order_part set picker = ${picker} where Id = ${Id}
    </update>
    
    <update id="complete">
    	update orders set orderStateId = 2,completedDate=#{date} where orderId=#{orderId}
    </update>
    <delete id="dedeletepart">
    	delete from order_part where Id = ${Id}
    </delete>
    <insert id="addpartonOrder">
    	insert into order_part(orderId,partId,picker)  values(#{orderId},#{partId},#{picker})
    </insert> 
    <update id="updateOrderById">
    	update orders  set discountPrice=#{discountPrice} ,settlementDate=#{settlementDate},orderStateId=3 where orderId=${orderId}
    </update> 
</mapper>
