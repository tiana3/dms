<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace="com.mydomain.UserMapper" 对应接口,就把这xml配置文件和对应接口联系上了-->
<mapper namespace="com.dms.dao.CustomerCarInfoDao">
<!-- 自定义返回结果集 -->
<!-- id="userBean" 是id用于下面返回值用    type="UserBean" 是对应的实体类   -->
   <resultMap id="customerCarInfo" type="CustomerCarInfo">
<!-- property="id" 是对应实体类的属性  column="id"  对应的是数据库的列  -->
        <id property="customerCarInfoId" column="customerCarInfoId" javaType="java.lang.Integer"></id>
        <result property="customerName" column="customerName" javaType="java.lang.String"></result>
        <result property="gender" column="gender" javaType="java.lang.String"></result>
        <result property="address" column="address" javaType="java.lang.String"></result>
        <result property="phone" column="phone" javaType="java.lang.String"></result>
        <result property="idCard" column="idCard" javaType="java.lang.String"></result>
        <result property="plateNumber" column="plateNumber" javaType="java.lang.String"></result>
        <result property="VIN" column="VIN" javaType="java.lang.String"></result>
        <result property="engineNumber" column="engineNumber" javaType="java.lang.String"></result>
        <result property="color" column="color" javaType="java.lang.String"></result>
        <result property="gearBox" column="gearBox" javaType="java.lang.String"></result>
        <result property="buyDate" column="buyDate" javaType="java.lang.String"></result>
        <result property="policyDate" column="policy" javaType="java.lang.String"></result>
<<<<<<< HEAD
        <result property="modelid" column="modelId" javaType="java.lang.Integer"></result>
=======
        <result property="modelid" column="modelid" javaType="java.lang.Integer"></result>
>>>>>>> branch 'master' of \\172.13.17.209\git
    </resultMap>
    

    
    
<!-- 在各种标签中的id属性必须和接口中的方法名相同 ， id属性值必须是唯一的，不能够重复使用。parameterType属性指明查询时使用的参数类型，resultMap="userBean" 是表明返回时是返回的上面<resultMap>标签里定义的类型，会把从数据库里读取出来的列，一个一个封装到实体类的property里     
  resultType属性指明查询返回的结果集类型，如果直接返回 resultType=“UserBean”，就不会通过resultMap，会直接把读取的数据，封装到UserBean实体类   数据对应条件是， 数据库里的字段名和实体类的属性名一样，或者和实体类的set方法名对应，不然数据就找不到对应的实体类属性 -->    
<!-- useGeneratedKeys：（ 仅 对 insert 有 用 ） 这 会 告 诉 MyBatis 使 用 JDBC 的getGeneratedKeys 
            方法来取出由数据（比如：像 MySQL 和 SQLServer 这样的数据库管理系统的自动递增字段）内部生成的主键。默认值： false。 -->    
<!--keyProperty： （仅对 insert有用）标记一个属性， MyBatis 会通过 getGeneratedKeys或者通过 insert 语句的 selectKey 子元素设置它的值。默认：不设置。 -->
<!--#{}中的内容，为占位符，当参数为某个JavaBean时，表示放置该Bean对象的属性值  -->

	<!--  useGeneratedKeys="true" keyProperty="id"  这就表明要在添加的同时，从数据库获取自动生成的id字段的数据，获取到后会直接设置到调用时传入的对象里 -->

    
    <select id="getCustomerCarInfoByKey"  resultMap="customerCarInfo">
     select * from customercarinfo where plateNumber=#{plateNumber} or VIN=#{VIN}
    </select>    
     <select id="getCustomerCarInfoByWordKey"  resultMap="customerCarInfo">
     select * from customercarinfo 
     <where>
				<if test="plateNumber != null">plateNumber like "%"#{plateNumber}"%"</if>				
				<if test="VIN != null" >and VIN like "%"#{VIN}"%"</if>
				<if test="phone != null">and phone like "%"#{phone}"%"</if>
				<if test="customerName != null">and customerName like "%"#{customerName}"%"</if>
 		</where> 
    </select>
    <select id="getCustomerCarInfoById" resultMap="customerCarInfo">
    		select * from customercarinfo where customerCarInfoId = #{customerCarInfoId};
    </select>
	<insert id="addCustomerCarInfo" useGeneratedKeys="true" keyProperty="customerCarInfoId">
		INSERT INTO customercarinfo (customerName,gender,address,phone,idCard,plateNumber,VIN,engineNumber,color,gearBox,buyDate,policy,modelId) 
		VALUES (#{customerName},#{gender} , #{address}, #{phone}, #{idCard},#{plateNumber}, #{VIN}, #{engineNumber}, #{color}, #{gearBox}, #{buyDate}, #{policyDate},#{modelid});
	</insert>
    <delete id="removeCustomerCarInfo">
    	delete from customercarinfo where customerCarInfoId = #{customerCarInfoId};
    </delete>
    <update id="updateCustomerCarInfo" >
    	update customercarinfo set customerName=#{customerName},gender=#{gender}, address=#{address},phone=#{phone},idCard=#{idCard},plateNumber=#{plateNumber}, VIN=#{VIN} ,engineNumber=#{engineNumber}, color=#{color}, 
    	gearbox=#{gearBox} ,  buyDate=#{buyDate} , policy=#{policyDate}, modelId=#{modelid} where customerCarInfoId = #{customerCarInfoId};
    </update>
</mapper>
